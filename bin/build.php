<?hh // partial
/*
 *  Copyright (c) 2004-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */
namespace HHVM\UserDocumentation;

use namespace HH\Lib\{C, Vec};

<<__EntryPoint>>
function build_site(): void {
  require_once(__DIR__.'/../vendor/autoload.hack');
  \Facebook\AutoloadMap\initialize();

  $argv = \HH\global_get('argv') as KeyedContainer<_, _>
    |> Vec\drop($$, 1);

  $filters = keyset[];
  $flags = keyset[];
  foreach ($argv as $arg) {
    if ($arg is BuildFlags) {
      $flags[] = $arg;
    } else {
      $filters[] = $arg;
    }
  }

  if (!\is_dir(BuildPaths::SCRATCH_DIR)) {
    \mkdir(BuildPaths::SCRATCH_DIR, 0755, /* recursive = */ true);
  }
  if (!\is_dir(BuildPaths::FINAL_DIR)) {
    \mkdir(BuildPaths::FINAL_DIR, 0755, /* recursive = */ true);
  }

  $steps = vec[
    // No Dependencies
    APISourcesBuildStep::class,
    PHPIniSupportInHHVMBuildStep::class,
    FacebookIPRangesBuildStep::class,
    // Just the API Sources
    HHAPIDocBuildStep::class,

    // Needs getting the PHP ini settings HHVM supports
    PHPIniSupportInHHVMMarkdownBuildStep::class,

    // Needs the YAML
    GuidesIndexBuildStep::class,

    // Needs the previous indices
    UnifiedAPIIndexBuildStep::class,
    SiteMapBuildStep::class,
    APILegacyRedirectsBuildStep::class,

    // This needs to be able to invoke static methods on the controllers;
    // some of the controller files require_once() generated indicies, so the
    // indices must be built before codegen can be updated.
    RoutingCodegenBuildStep::class,

    // Needed by SASS
    RubyDependenciesBuildStep::class,

    // Static Resources
    SASSBuildStep::class,
    StaticResourceMapBuildStep::class,

    // Needs the Markdown
    GuidesHTMLBuildStep::class,
    APIHTMLBuildStep::class,

    // Needs the list of files generated by *HTMLBuildStep.
    FindRedundantFilesBuildStep::class,

    // Needs to be done after all Hack codegen
    UpdateAutoloaderBuildStep::class,
  ];

  if (!C\is_empty($filters)) {
    $steps = Vec\filter(
      $steps,
      $step ==> {
        foreach ($filters as $filter) {
          if (\stripos($step, $filter) !== false) {
            return true;
          }
        }
        return false;
      },
    );
  }

  $steps = Vec\concat(vec[BuildIDBuildStep::class], $steps);

  foreach ($steps as $step) {
    (new $step($flags))->buildAll();
  }

  echo "\n"; // Make the bash prompt nice after :p
}
