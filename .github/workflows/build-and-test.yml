name: Continuous Integration
on:
  push:
  pull_request:
  schedule:
    - cron: '42 15 * * *'
jobs:
  build:
    name: Build and Test
    strategy:
      matrix:
        os: [ ubuntu ]
        hhvm: [ '4.121' ]
    runs-on: ${{matrix.os}}-latest
    steps:
      - uses: actions/checkout@v2
      - name: Fetch docker images
        run: |
          docker pull hhvm/hhvm:${{matrix.hhvm}}-latest
          docker pull hhvm/hhvm-proxygen:${{matrix.hhvm}}-latest
      - name: Build
        run: docker build -t hhvm/user-documentation:scratch -f .deploy/built-site.Dockerfile .
      - name: Typecheck
        run: docker run --rm -w /var/www hhvm/user-documentation:scratch hh_server --check .
      - name: Run tests
        run: docker run --rm -w /var/www hhvm/user-documentation:scratch vendor/bin/hacktest tests/
      - name: Lint
        run: docker run --rm -w /var/www hhvm/user-documentation:scratch vendor/bin/hhast-lint
      - name: Verify codegen is unchanged
        run: docker run --rm -w /var/www hhvm/user-documentation:scratch vendor/bin/hh-codegen-verify-signatures src
      - name: Export Docker image
        run: docker save hhvm/user-documentation:scratch -o hack-docs.tar
      - name: Save Docker image as build artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: hack-docs.tar
  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Docker image from build step
        uses: actions/download-artifact@v2
        with:
          name: docker-image
      - name: Import Docker image
        run: docker load --input hack-docs.tar
      - name: Build HHBC repo
        run: |
          mkdir ${{runner.temp}}/repo-out
          docker run --rm \
            -v ${{runner.temp}}/repo-out:/var/out \
            -w /var/www \
            hhvm/user-documentation:scratch \
            .deploy/build-repo.sh
      - name: Set image tag/name variables
        run: |
          DEPLOY_REV=$(git rev-parse --short HEAD)
          HHVM_VERSION=$(awk '/APIProduct::HACK/{print $NF}' src/codegen/PRODUCT_TAGS.php | cut -f2 -d- | cut -f1-2 -d.)
          IMAGE_TAG="HHVM-${HHVM_VERSION}-$(date +%Y-%m-%d)-${DEPLOY_REV}"
          IMAGE_NAME="hhvm/user-documentation:$IMAGE_TAG"
          echo "DEPLOY_REV=$DEPLOY_REV" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
      - name: Build repo-authoritative Docker image
        run: |
          cp hhvm.prod.ini ${{runner.temp}}/repo-out
          cp .deploy/prod.Dockerfile ${{runner.temp}}/repo-out/Dockerfile
          (
            cd ${{runner.temp}}/repo-out
            docker build -t ${IMAGE_NAME} .
          )
      - name: Install AWS CLI
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y awscli
      - name: Install ElasticBeanstalk CLI
        run: |
          git clone --depth 10 https://github.com/aws/aws-elastic-beanstalk-cli-setup.git
          ./aws-elastic-beanstalk-cli-setup/scripts/bundled_installer
          echo "PATH=$HOME/.ebcli-virtual-env/executables:$PATH" >> $GITHUB_ENV
      - name: Configure ElasticBeanstalk
        run: |
          # Select an application to use: 1) hhvm-hack-docs
          # Select the default environment: 1) ... doesn't matter, managed by script
          # Do you want to continue with CodeCommit? n
          echo -e "1\n1\nn\n" | eb init -r us-west-2
          eb status
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      - name: Log in to DockerHub
        run: |
          echo "${{secrets.DOCKERHUB_PASSWORD}}" | docker login -u "${{secrets.DOCKERHUB_USER}}" \
            --password-stdin
      - name: Push image to DockerHub
        run: |
          docker tag "$IMAGE_NAME" hhvm/user-documentation:latest
          docker push "$IMAGE_NAME"
          docker push "hhvm/user-documentation:latest"
      - name: Identify live vs staging environment
        run: |
          if eb status hhvm-hack-docs-a | grep -q 'CNAME: hhvm-hack-docs-staging.elasticbeanstalk.com'; then
            echo PROD_ENV=hhvm-hack-docs-b >> $GITHUB_ENV
            echo STAGING_ENV=hhvm-hack-docs-a >> $GITHUB_ENV
          else
            echo PROD_ENV=hhvm-hack-docs-a >> $GITHUB_ENV
            echo STAGING_ENV=hhvm-hack-docs-b >> $GITHUB_ENV
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      - name: Update AWS configuration
        run: |
          sed -E 's,"hhvm/user-documentation:IMAGE_TAG","'$IMAGE_NAME'",' \
            Dockerrun.aws.json.in > Dockerrun.aws.json
      - name: Restart staging environment's Docker server (${{env.STAGING_ENV}})
        run: |
          aws elasticbeanstalk restart-app-server \
            --region us-west-2 \
            --environment-name "$STAGING_ENV"
          for I in $(seq 5 10 55); do
            echo "Waiting $I seconds..."
            sleep "$I"
            if eb status "$STAGING_ENV" | grep -i "Status: Ready"; then
              exit 0
            fi
          done
          echo "Timed out while waiting for $STAGING_ENV to become ready."
          exit 1
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      - name: Deploy to staging environment (${{env.STAGING_ENV}})
        run: |
          eb status "$STAGING_ENV"
          DEPLOY_MESSAGE="$(git log -1 --oneline $DEPLOY_REV)"
          eb deploy "$STAGING_ENV" -m "$DEPLOY_MESSAGE" --staged -v
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      - name: Run test suite against staging
        run: |
          docker run --rm \
            -w /var/www \
            -e REMOTE_TEST_HOST=staging.docs.hhvm.com \
            hhvm/user-documentation:scratch \
            vendor/bin/hacktest \
            --filter-groups remote \
           tests/
      - name: Swap staging and prod
        run: eb swap ${{env.STAGING_ENV}} --destination_name ${{env.PROD_ENV}}
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
