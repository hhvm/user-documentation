<?hh

namespace Hack\UserDocumentation\Generics\Unresolved\Examples\Unresolved;

class Box<T> {
  private array<T> $contents;
  public function __construct() {
    $this->contents = array();
  }
  public function addTo(T $item) {
    $this->contents[] = $item;
  }
  public function get(): array<T> {
    return $this->contents;
  }
}

function add_box_of_ints(Box<int> $box): int {
  return array_sum($box->get());
}

function unresolved(): void {
  $box = new Box();
  // You might think that T has been bound to int, but no.
  $box->addTo(4);
  // Now we are unresolved. The typechecker knows we are using Box as a
  // container of ints and now strings. Do we have a mixed Box?
  $box->addTo('Hi');
  // Well, we are not at a boundary, so the typechecker just let's this go.
}

function resolved(): void {
  $box = new Box();
  // You might think that T has been bound to int, but no.
  $box->addTo(4);
  // Now we are unresolved. The typechecker knows we are using Box as a
  // container of ints and now strings. Do we have a mixed container?
  $box->addTo('Hi');
  // still unresolved
  $box->addTo(99);
  // Here we are resolved! add_box_of_ints is expecting a Box<int> and we
  // don't have it. Now the typechecker can issue an error about adding the
  // string
  var_dump(add_box_of_ints($box));
}

function run(): void {
  unresolved();
  resolved();
}

run();
