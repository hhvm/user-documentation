<?hh

namespace Hack\UserDocumentation\Types\Inference\Examples\Props;

class A {
  protected ?int $x;

  public function __construct() {
    $this->x = 3;
  }

  public function setPropToNull(): void {
    $this->x = null;
  }

  public function checkPropBad(): void {
    // Typechecker knows $x isn't null after this validates
    if ($this->x !== null) {
      // We know that this doesn't call A::setPropToNull(), but the typechecker
      // does not since inferences is local to the function.
      // Commenting out so typechecker passes on all examples
      does_not_set_to_null();
      // We know that $x is still not null, but the typechecker doesn't
      take_an_int($this->x);
    }
  }

  public function checkPropGood(): void {
    // Typechecker knows $x isn't null after this validates
    if ($this->x !== null) {
      // We know that this doesn't call A::setPropToNull(), but the typechecker
      // does not since inferences is local to the function.
      does_not_set_to_null();
      // Use this invariant to tell the typechecker what's happening.
      invariant($this->x !== null, "We know it is not null");
      // We know that $x is still not null, and now the typechecker does too
      // Could also have used a local variable here saying:
      //    $local = $this->x;
      //    takes_an_int($local);
      take_an_int($this->x);
    }
  }
}

function does_not_set_to_null(): void {
  echo "I don't set A::x to null" . PHP_EOL;
}

function take_an_int(int $x): void {
  var_dump($x);
}

function run(): void {
  $a = new A();
  $a->checkPropBad();
  $a->checkPropGood();
}

run();
